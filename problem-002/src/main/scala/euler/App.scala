package euler.problem002

import scala.collection.mutable

/**
 * <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:<br>
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...<br/>
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.</p>
 */
object App {

  def main(args: Array[String]) {
    var limit = 4000000
    if(args != null && !args.isEmpty && args(0) != null) {
       limit = args(0).toInt   
    }
    
    println("The sum of even fibonacci numbers less than " + limit + " is " + sumEvenFibs(limit))
  }
  
  /**
   * @param limit the limit below which we'll sum even-valued fibonacci numbers.  For example, a limit of "20" will be used
   * to generate a fibonacci list of (1, 2, 3, 5, 8, 13) and then sum the even numbers in that list (2, 8) for a value of 10
   * @return the sum of the even valued fibonacci numbers in the fibonacci series whose elements are all less than limit
   */
  def sumEvenFibs(limit: Int) : Int = {
    val evenFibs = fibonacciList(limit) filter (_ % 2 == 0)
    
    var sum = 0
    evenFibs map {sum += _}
    sum
  }
  
  def fibonacciList(limit: Int): List[Int] = {
    require(limit >= 0)
    limit match {
      case 0 => List(0)
      case 1 => List(1)
      case 2 => List(1, 2)
      case _ => genFibList(2, limit, List(1))
    }
  }
  
  private def genFibList(current: Int, limit: Int, list: List[Int]): List[Int] = {
    if(current > limit) {
      list.reverse
    } else {
      genFibList(current + list.head, limit, current :: list)
    }
  }
}
