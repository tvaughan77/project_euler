package euler.problem012

import euler.TriangleNumber
import euler.LogHelper
import euler.Numbers

/**
 * <p>The sequence of triangle numbers is generated by adding the natural numbers.<br/> 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. </p>
 * 
 * <p>The first ten terms would be:<br/>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>
 * 
 * <p>Let us list the factors of the first seven triangle numbers:<br/><br/>
 * <pre>
 *    1: 1
 *    3: 1,3
 *    6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 * </pre>
 * <p>We can see that 28 is the first triangle number to have over five divisors.</p>
 * <p>What is the value of the first triangle number to have over five hundred divisors?</p>
 * 
 * <p>FIXME - this brute force approach sucks.  This took 104 minutes to come up with the right answer: 76576500<br/>
 * My factor method in Numbers.scala is butt-slow when numbers get big.  Be more clever there.</p>
 */
object App extends LogHelper {

  var triangle = new TriangleNumber
  var factorsLimit = 500
  
  def main(args: Array[String]) {
    
    val number = findTriangleNumberExceedingFactorLimit(factorsLimit)
  }
  
  def findTriangleNumberExceedingFactorLimit(limit: Int): Long = {
    var i = 1
    var exceedsFactorsLimit = false
    var triangleNumber = 0L;
    
    while(!exceedsFactorsLimit) {
      triangleNumber = triangle(i)
      var factors = Numbers.factor(triangleNumber)
      
      debug("Triangle number # %d is %d and it has %d factors.", i, triangleNumber, factors.size)
      
      if(factors.size > factorsLimit) {
        exceedsFactorsLimit = true
        info("The %d triangle number is %d and it has %d factors. That's your winner.", i, triangleNumber, factors.size)
      } else {
        i = i + 1  
      }
    }
    triangleNumber
  }
}
